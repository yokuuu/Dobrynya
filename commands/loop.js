const { QueueRepeatMode, useQueue } = require("discord-player");
const { ApplicationCommandOptionType, EmbedBuilder } = require("discord.js");

module.exports = {
	name: "loop",
	description: "–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –ø–æ–≤—Ç–æ—Ä –ø–µ—Å–µ–Ω –∏–ª–∏ –≤—Å–µ–π –æ—á–µ—Ä–µ–¥–∏",
	voiceChannel: true,
	options: [
		{
			name: "action",
			description: "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å",
			type: ApplicationCommandOptionType.String,
			required: true,
			choices: [
				{ name: "Queue", value: "enable_loop_queue" },
				{ name: "Disable", value: "disable_loop" },
				{ name: "Song", value: "enable_loop_song" },
				{ name: "Autoplay", value: "enable_autoplay" },
			],
		},
	],

	async execute({ inter }) {
		const queue = useQueue(inter.guild);
		const errorMessage = `–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ ${inter.member}... –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ ‚ùå`;
		let baseEmbed = new EmbedBuilder().setColor("#2f3136");

		if (!queue?.isPlaying())
			return inter.editReply({
				content: `–ú—É–∑—ã–∫–∞ —Å–µ–π—á–∞—Å –Ω–µ –∏–≥—Ä–∞–µ—Ç ${inter.member}... –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ ‚ùå`,
			});

		switch (inter.options._hoistedOptions.map((x = x.value)).toString()) {
			case "enable_loop_queue": {
				if (queue.repeatMode === QueueRepeatMode.TRACK)
					return inter.editReply({
						content: `–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–∫–ª—é—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –º—É–∑—ã–∫—É –≤ —Ä–µ–∂–∏–º–µ –ø–æ–≤—Ç–æ—Ä–∞. (\`/loop Disable\`) ${inter.member}... –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ ‚ùå`,
					});

				const success = queue.setRepeatMode(QueueRepeatMode.QUEUE);
				baseEmbed.setAuthor({
					name: success ? errorMessage : `–í—Å—è –æ—á–µ—Ä–µ–¥—å –±—É–¥–µ—Ç –∏–≥—Ä–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ üîÅ`,
				});

				return inter.editReply({ embeds: [baseEmbed] });
			}
			case "disable_loop": {
				if (queue.repeatMode === QueueRepeatMode.OFF)
					return inter.editReply({
						content: `–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –ø–æ–≤—Ç–æ—Ä–∞. (/loop Queue –∏–ª–∏ /loop Song) ${inter.member}... –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ ‚ùå`,
					});

				const success = queue.setRepeatMode(QueueRepeatMode.OFF);
				baseEmbed.setAuthor({
					name: success ? errorMessage : `–ü—Ä–µ–∫—Ä–∞—â–µ–Ω –ø–æ–≤—Ç–æ—Ä –æ—á–µ—Ä–µ–¥–∏ üîÅ`,
				});

				return inter.editReply({ embeds: [baseEmbed] });
			}
			case "enable_loop_song": {
				if (queue.repeatMode === QueueRepeatMode.QUEUE)
					return inter.editReply({
						content: `–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –ø–æ–≤—Ç–æ—Ä–∞. (\`/loop Disable\`) ${inter.member}... –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ ‚ùå`,
					});

				const success = queue.setRepeatMode(QueueRepeatMode.TRACK);
				baseEmbed.setAuthor({
					name: success
						? errorMessage
						: `–†–µ–∂–∏–º –ø–æ–≤—Ç–æ—Ä–∞ –≤–∫–ª—é—á–µ–Ω (–í—ã–∫–ª—é—á–∏—Ç—å - \`/loop disable\` )`,
				});

				return inter.editReply({ embeds: [baseEmbed] });
			}
			case "enable_autoplay": {
				if (queue.repeatMode === QueueRepeatMode.AUTOPLAY)
					return inter.editReply({
						content: `–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –ø–æ–≤—Ç–æ—Ä–∞. (\`/loop Disable\`) ${inter.member}... –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ ‚ùå`,
					});

				const success = queue.setRepeatMode(QueueRepeatMode.AUTOPLAY);
				baseEmbed.setAuthor({
					name: success
						? errorMessage
						: `–ê–≤—Ç–æ–≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ, –æ—á–µ—Ä–µ–¥—å –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –ø–µ—Å–Ω—è–º–∏, –ø–æ—Ö–æ–∂–∏–º–∏ –Ω–∞ —Ç–µ–∫—É—â—É—é. üîÅ`,
				});

				return inter.editReply({ embeds: [baseEmbed] });
			}
		}
	},
};
